name: Build

on:
  push:
    branches:
      - "flutter-*-tizen"
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository_owner }}/build-engine:latest
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      matrix:
        arch: [arm, arm64, x86]
        mode: [debug, release, profile]
        include:
          - arch: arm
            triple: arm-linux-gnueabi
          - arch: arm64
            triple: aarch64-linux-gnu
          - arch: x86
            triple: i686-linux-gnu
        exclude:
          - arch: x86
            mode: release
          - arch: x86
            mode: profile

    env:
      OUTPUT_NAME: linux_${{ matrix.mode }}_${{ matrix.arch }}

    steps:
      - uses: actions/checkout@v2
        with:
          path: src/flutter
          fetch-depth: 0

      - uses: actions/cache@v3
        with:
          path: src/out/${{ env.OUTPUT_NAME }}
          key: out-build-${{ env.OUTPUT_NAME }}-${{ github.sha }}
          restore-keys: |
            out-build-${{ env.OUTPUT_NAME }}-

      - name: gclient sync
        run: |
          src/flutter/ci/tizen/gclient-prepare-sync.sh --reduce-deps --shallow-sync
          gclient sync -v --no-history --shallow

      - name: verify formatting
        if: matrix.arch == 'arm' && matrix.mode == 'release'
        working-directory: src/flutter
        run: |
          git remote add upstream https://github.com/flutter/engine.git
          ci/format.sh

      - name: build
        run: |
          src/flutter/ci/tizen/cache-checksum.sh restore src/out/$OUTPUT_NAME

          src/flutter/tools/gn \
            --target-os linux --linux-cpu ${{ matrix.arch }} \
            --no-goma \
            --target-toolchain /tizen_tools/toolchains \
            --target-sysroot /tizen_tools/sysroot/${{ matrix.arch }} \
            --target-triple ${{ matrix.triple }} \
            --runtime-mode ${{ matrix.mode }} \
            --enable-fontconfig \
            --no-full-dart-sdk \
            --no-build-embedder-examples \
            --embedder-for-target \
            --build-tizen-shell
          ninja -C src/out/$OUTPUT_NAME tizen

          if [ "${{ matrix.mode }}" != "debug" ]; then
            ninja -C src/out/$OUTPUT_NAME clang_x64/gen_snapshot
          fi

          # Build unittests.
          if [ "$OUTPUT_NAME" = "linux_release_arm" ]; then
            ninja -C src/out/$OUTPUT_NAME flutter_tizen_unittests
          fi

          src/flutter/ci/tizen/cache-checksum.sh save src/out/$OUTPUT_NAME

      - uses: actions/upload-artifact@v2
        if: matrix.arch == 'arm' && matrix.mode == 'release'
        with:
          name: tizen-arm-unittests
          path: src/out/${{ env.OUTPUT_NAME }}/*_unittests
          if-no-files-found: error

      - uses: actions/upload-artifact@v2
        with:
          name: tizen-${{ matrix.arch }}-${{ matrix.mode }}
          path: src/out/${{ env.OUTPUT_NAME }}/libflutter_*.so
          if-no-files-found: error

      - uses: actions/upload-artifact@v2
        if: github.event_name == 'push'
        with:
          name: tizen-${{ matrix.arch }}-${{ matrix.mode }}_symbols
          path: src/out/${{ env.OUTPUT_NAME }}/so.unstripped/libflutter_*.so
          if-no-files-found: error

      - uses: actions/upload-artifact@v2
        if: matrix.arch == 'arm' && matrix.mode == 'release'
        with:
          name: tizen-common
          path: |
            src/out/linux_release_arm/icu
            src/out/linux_release_arm/public
            src/out/linux_release_arm/cpp_client_wrapper
            !src/out/linux_release_arm/cpp_client_wrapper/engine_method_result.cc
          if-no-files-found: error

      - uses: actions/upload-artifact@v2
        if: (matrix.arch == 'arm' || matrix.arch == 'arm64') && matrix.mode != 'debug'
        with:
          name: tizen-${{ matrix.arch }}-${{ matrix.mode }}_linux-x64
          path: src/out/${{ env.OUTPUT_NAME }}/clang_x64/gen_snapshot
          if-no-files-found: error

  windows-build:
    runs-on: windows-2019

    strategy:
      matrix:
        arch: [arm, arm64]
        mode: [release, profile]

    env:
      OUTPUT_NAME: linux_${{ matrix.mode }}_${{ matrix.arch }}

    steps:
      - name: checkout engine
        run: |
          mkdir C:\workspace\engine\src\flutter
          cd C:\workspace\engine\src\flutter
          git config --global core.autocrlf true
          git init --quiet
          git remote add origin https://github.com/${{ github.repository }}
          git fetch --depth 1 origin ${{ github.sha }}
          git checkout FETCH_HEAD

      - name: setup environments
        run: |
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -Force
          echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" >> $Env:GITHUB_ENV
          echo "GYP_MSVS_OVERRIDE_PATH=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise" >> $Env:GITHUB_ENV
          echo "WINDOWSSDKDIR=C:\Program Files (x86)\Windows Kits\10" >> $Env:GITHUB_ENV

      - name: install depot_tools
        run: |
          Invoke-WebRequest -Uri https://storage.googleapis.com/chrome-infra/depot_tools.zip -OutFile depot_tools.zip
          7z x -y -o"C:\workspace\depot_tools" .\depot_tools.zip
          echo "C:\workspace\depot_tools" >> $Env:GITHUB_PATH

      - name: gclient sync
        working-directory: C:\workspace\engine
        run: |
          gclient config --name=src\flutter --unmanaged https://github.com/flutter-tizen/engine
          $Env:PYTHONPATH="C:\workspace\depot_tools"
          python3 src\flutter\ci\tizen\gclient-shallow-sync.py src\flutter\DEPS
          $Env:PYTHONPATH=""
          gclient sync -v --no-history --shallow

      - name: build
        working-directory: C:\workspace\engine\src
        run: |
          python3 .\flutter\tools\gn `
            --linux --linux-cpu=${{ matrix.arch }} `
            --runtime-mode=${{ matrix.mode }} `
            --no-goma
          ninja -C .\out\${{ env.OUTPUT_NAME }} gen_snapshot

      - uses: actions/upload-artifact@v2
        with:
          name: tizen-${{ matrix.arch }}-${{ matrix.mode }}_windows-x64
          path: C:\workspace\engine\src\out\${{ env.OUTPUT_NAME }}\gen_snapshot.exe
          if-no-files-found: error

  macos-build:
    runs-on: macos-11

    strategy:
      matrix:
        arch: [arm, arm64]
        mode: [release, profile]

    env:
      OUTPUT_NAME: linux_${{ matrix.mode }}_${{ matrix.arch }}

    steps:
      - uses: actions/checkout@v2
        with:
          path: src/flutter

      - uses: actions/cache@v3
        with:
          path: src/out/${{ env.OUTPUT_NAME }}
          key: out-macos-build-${{ env.OUTPUT_NAME }}-${{ github.sha }}
          restore-keys: |
            out-macos-build-${{ env.OUTPUT_NAME }}-

      - name: install depot_tools
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          echo "$PWD/depot_tools" >> $GITHUB_PATH

      - name: install required packages
        run: |
          brew install md5sha1sum

      - name: gclient sync
        run: |
          gclient config --name=src/flutter --unmanaged https://github.com/flutter-tizen/engine
          gclient setdep --var=download_android_deps=False --deps-file=src/flutter/DEPS
          PYTHONPATH="$PWD/depot_tools" python3 src/flutter/ci/tizen/gclient-shallow-sync.py src/flutter/DEPS
          gclient sync -v --no-history --shallow

      - name: build
        run: |
          src/flutter/ci/tizen/cache-checksum.sh restore src/out/$OUTPUT_NAME

          # Change host_toolchain to mac/clang_x64.
          sed -i "" "s|//build/toolchain/linux:clang_$host_cpu|//build/toolchain/mac:clang_$host_cpu|g" src/build/config/BUILDCONFIG.gn

          # Pass dummy toolchain values to avoid using linux target toolchain settings.
          src/flutter/tools/gn \
            --linux --linux-cpu=${{ matrix.arch }} \
            --no-goma \
            --target-toolchain _ \
            --target-sysroot _ \
            --target-triple _ \
            --runtime-mode=${{ matrix.mode }} \
            --disable-desktop-embeddings
          ninja -C src/out/$OUTPUT_NAME clang_x64/gen_snapshot

          src/flutter/ci/tizen/cache-checksum.sh save src/out/$OUTPUT_NAME

      - uses: actions/upload-artifact@v2
        with:
          name: tizen-${{ matrix.arch }}-${{ matrix.mode }}_darwin-x64
          path: src/out/${{ env.OUTPUT_NAME }}/clang_x64/gen_snapshot
          if-no-files-found: error

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: docker/setup-qemu-action@v1
        with:
          platforms: arm

      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v2
        with:
          name: tizen-arm-release

      - uses: actions/download-artifact@v2
        with:
          name: tizen-arm-unittests

      - name: run unittests
        env:
          IMAGE_TAG: ghcr.io/${{ github.repository_owner }}/tizen-headed-armv7l
        run: |
          chmod +x flutter_tizen_unittests
          docker run --rm -t -v `pwd`:/root ${IMAGE_TAG} /root/flutter_tizen_unittests

  release:
    needs: [windows-build, macos-build, test]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2

      - name: create archives
        run: |
          rm -r *-unittests
          for name in tizen-*; do
            7z a $name.zip ./$name/*
          done

      - name: set variables
        run: |
          echo "SHORT_SHA=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_ENV
          echo "VERSION=$(echo "${{ github.ref_name }}" | cut -d'-' -f2)" >> $GITHUB_ENV

      - uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.VERSION }} (${{ env.SHORT_SHA }})
          tag_name: ${{ env.VERSION }}-${{ env.SHORT_SHA }}
          target_commitish: ${{ github.sha }}
          files: tizen-*.zip
          body: |
            Flutter engine ${{ env.VERSION }} for Tizen

            https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
